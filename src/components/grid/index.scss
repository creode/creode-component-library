@use '../globals.scss';

/// @param number $vertical-outer-space - Additional space to be added to the top and bottom of the component.
/// @param number $vertical-gutter - The vertical space between grid items.
/// @param number $horizontal-gutter - The horizontal space between grid items.
/// @param number $breakpoint-medium - The browser width (in pixels) above which a browser should be regarded as medium size.
/// @param number $breakpoint-medium-items-per-row - The items per row on medium size browsers.
/// @param number $breakpoint-medium-vertical-outer-space - Additional space to be added to the top and bottom of the component on medium size browsers.
/// @param number $breakpoint-large - The browser width (in pixels) above which a browser should be regarded as large size.
/// @param number $breakpoint-large-items-per-row - The items per row on large size browsers.
/// @param number $breakpoint-large-vertical-outer-space - Additional space to be added to the top and bottom of the component on large size browsers.
@mixin configure(
	$vertical-outer-space: null,
	$vertical-gutter: null,
	$horizontal-gutter: null,
	$breakpoint-medium: null,
	$breakpoint-medium-items-per-row: null,
	$breakpoint-medium-vertical-outer-space: null,
	$breakpoint-large: null,
	$breakpoint-large-items-per-row: null,
	$breakpoint-large-vertical-outer-space: null
) {

	@if $vertical-outer-space {
		$vertical-outer-space: $vertical-outer-space!global;
	} @else {
		$vertical-outer-space: globals.$space-vertical !global;
	}

	@if $vertical-gutter {
		$vertical-gutter: $vertical-gutter !global;
	} @else {
		$vertical-gutter: globals.$space-vertical !global;
	}

	@if $horizontal-gutter {
		$horizontal-gutter: $horizontal-gutter !global;
	} @else {
		$horizontal-gutter: globals.$space-horizontal !global;
	}

	@if $breakpoint-medium {
		$breakpoint-medium: $breakpoint-medium !global;
	} @else {
		$breakpoint-medium: globals.$breakpoint-medium !global;
	}

	@if $breakpoint-medium-items-per-row {
		$breakpoint-medium-items-per-row: $breakpoint-medium-items-per-row !global;
	} @else {
		$breakpoint-medium-items-per-row: 2 !global;
	}

	@if $breakpoint-medium-vertical-outer-space {
		$breakpoint-medium-vertical-outer-space: $breakpoint-medium-vertical-outer-space !global;
	} @else {
		$breakpoint-medium-vertical-outer-space: globals.$space-vertical !global;
	}

	@if $breakpoint-large {
		$breakpoint-large: $breakpoint-large !global;
	} @else {
		$breakpoint-large: globals.$breakpoint-large !global;
	}

	@if $breakpoint-large-items-per-row {
		$breakpoint-large-items-per-row: $breakpoint-large-items-per-row !global;
	} @else {
		$breakpoint-large-items-per-row: 4 !global;
	}

	@if $breakpoint-large-vertical-outer-space {
		$breakpoint-large-vertical-outer-space: $breakpoint-large-vertical-outer-space !global;
	} @else {
		$breakpoint-large-vertical-outer-space: globals.$space-vertical !global;
	}

}

@mixin render() {

	.grid__wrapper {
		overflow: hidden;
		padding-top: $vertical-outer-space;
		padding-bottom: $vertical-outer-space - $vertical-gutter;

		@media only screen and (min-width: $breakpoint-medium) {
			padding-top: $breakpoint-medium-vertical-outer-space;
			padding-bottom: $breakpoint-medium-vertical-outer-space - $vertical-gutter;
		}

		@media only screen and (min-width: $breakpoint-large) {
			padding-top: $breakpoint-large-vertical-outer-space;
			padding-bottom: $breakpoint-large-vertical-outer-space - $vertical-gutter;
		}
	}

	.grid__wrapper--reduce-bottom-space {
		@if $vertical-gutter < $vertical-outer-space {
			margin-bottom: $vertical-outer-space * -1;
		} @else {
			margin-bottom: $vertical-gutter * -1;
		}

		@media only screen and (min-width: $breakpoint-medium) {
			@if $vertical-gutter < $breakpoint-medium-vertical-outer-space {
				margin-bottom: $breakpoint-medium-vertical-outer-space * -1;
			} @else {
				margin-bottom: $vertical-gutter * -1;
			}
		}

		@media only screen and (min-width: $breakpoint-large) {
			@if $vertical-gutter < $breakpoint-large-vertical-outer-space {
				margin-bottom: $breakpoint-large-vertical-outer-space * -1;
			} @else {
				margin-bottom: $vertical-gutter * -1;
			}
		}
	}

	.grid__items {
		display: flex;
		flex-wrap: wrap;
		margin: 0 $horizontal-gutter * -0.5;
	}

	.grid__item {
		box-sizing: border-box;
		width: 100%;
		padding: 0 $horizontal-gutter * 0.5 $vertical-gutter;

		@media only screen and (min-width: $breakpoint-medium) {
			width: calc(100% / $breakpoint-medium-items-per-row);
		}

		@media only screen and (min-width: $breakpoint-large) {
			width: calc(100% / $breakpoint-large-items-per-row);
		}
	}

}
